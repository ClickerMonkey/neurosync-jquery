{"version":3,"sources":["jquery.js"],"names":["global","Rekord","$","undefined","removeTrailingSlash","x","charAt","length","substring","execute","method","data","url","success","failure","offlineValue","debug","Debugs","REST","this","forceOffline","onRestSuccess","textStatus","jqXHR","onRestError","errorThrown","status","options","cache","dataType","ajax","RestFactory","database","all","api","get","model","$key","create","encoded","update","remove","query","setRest","jQuery"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAGA,QAAAC,GAAAC,GAEA,MAAA,MAAAA,EAAAC,OAAAD,EAAAE,OAAA,GAAAF,EAAAG,UAAA,EAAAH,EAAAE,OAAA,GAAAF,EAGA,QAAAI,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,GAFAd,EAAAe,MAAAf,EAAAgB,OAAAC,KAAAC,KAAAT,EAAAE,EAAAD,GAEAV,EAAAmB,aAEAN,EAAAC,EAAA,OAGA,CACA,GAAAM,GAAA,SAAAV,EAAAW,EAAAC,GAEAV,EAAAF,IAGAa,EAAA,SAAAD,EAAAD,EAAAG,GAEAX,EAAA,KAAAS,EAAAG,SAGAC,GAEAjB,OAAAA,EACAC,KAAAA,EACAC,IAAAA,EACAC,QAAAQ,EACAP,QAAAU,EACAI,OAAA,EACAC,SAAA,OAGA3B,GAAA4B,KAAAH,IAIA,QAAAI,GAAAC,GAEA,OACAC,IAAA,SAAApB,EAAAC,GAEAL,EAAA,MAAAN,EAAA6B,EAAAE,IAAArB,EAAAC,OAEAqB,IAAA,SAAAC,EAAAvB,EAAAC,GAEAL,EAAA,MAAAN,EAAAC,EAAA4B,EAAAE,IAAAE,EAAAC,QAAAxB,EAAAC,IAEAwB,OAAA,SAAAF,EAAAG,EAAA1B,EAAAC,GAEAL,EAAA,OAAA8B,EAAAnC,EAAA4B,EAAAE,KAAArB,EAAAC,OAEA0B,OAAA,SAAAJ,EAAAG,EAAA1B,EAAAC,GAEAL,EAAA,MAAA8B,EAAAnC,EAAA4B,EAAAE,IAAAE,EAAAC,QAAAxB,EAAAC,OAEA2B,OAAA,SAAAL,EAAAvB,EAAAC,GAEAL,EAAA,SAAAN,EAAAC,EAAA4B,EAAAE,IAAAE,EAAAC,QAAAxB,EAAAC,OAEA4B,MAAA,SAAA9B,EAAA8B,EAAA7B,EAAAC,GAEA,GAAAJ,GAAAgC,EAAA,OAAA,KAEAjC,GAAAC,EAAAgC,EAAA9B,EAAAC,EAAAC,KAKAb,EAAA0C,QAAAZ,GAAA,IAEAZ,KAAAA,KAAAlB,OAAAkB,KAAAyB","file":"rekord-jquery.min.js","sourcesContent":["(function (global, Rekord, $, undefined)\n{\n\n  function removeTrailingSlash(x)\n  {\n    return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n  }\n\n  function execute( method, data, url, success, failure, offlineValue )\n  {\n    Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n    if ( Rekord.forceOffline )\n    {\n      failure( offlineValue, 0 );\n    }\n    else\n    {\n      var onRestSuccess = function(data, textStatus, jqXHR)\n      {\n        success( data );\n      };\n\n      var onRestError = function(jqXHR, textStatus, errorThrown)\n      {\n        failure( null, jqXHR.status );\n      };\n\n      var options =\n      {\n        method: method,\n        data: data,\n        url: url,\n        success: onRestSuccess,\n        failure: onRestError,\n        cache: false,\n        dataType: 'json'\n      };\n\n      $.ajax( options );\n    }\n  }\n\n  function RestFactory(database)\n  {\n    return {\n      all: function( success, failure )\n      {\n        execute( 'GET', undefined, database.api, success, failure, [] );\n      },\n      get: function( model, success, failure )\n      {\n        execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n      },\n      create: function( model, encoded, success, failure )\n      {\n        execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n      },\n      update: function( model, encoded, success, failure )\n      {\n        execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      remove: function( model, success, failure )\n      {\n        execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      query: function( url, query, success, failure )\n      {\n        var method = query ? 'POST' : 'GET';\n\n        execute( method, query, url, success, failure );\n      }\n    };\n  }\n\n  Rekord.setRest( RestFactory, true );\n\n})( this, this.Rekord, this.jQuery );\n"],"sourceRoot":"/source/"}