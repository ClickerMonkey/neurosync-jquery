{"version":3,"sources":["rekord-jquery.js"],"names":["$","global","undefined","Rekord","setRest","database","removeTrailingSlash","x","charAt","length","substring","execute","method","data","url","success","failure","offlineValue","onRestSuccess","textStatus","jqXHR","onRestError","errorThrown","status","debug","Debugs","REST","this","forceOffline","options","cache","dataType","ajax","all","api","get","model","$key","create","encoded","update","remove","query","jQuery"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAGAC,OAAAC,QAAA,SAAAC,GAEA,QAAAC,GAAAC,GAEA,MAAA,MAAAA,EAAAC,OAAAD,EAAAE,OAAA,GAAAF,EAAAG,UAAA,EAAAH,EAAAE,OAAA,GAAAF,EAGA,QAAAI,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAUA,QAAAC,GAAAL,EAAAM,EAAAC,GAEAL,EAAAF,GAGA,QAAAQ,GAAAD,EAAAD,EAAAG,GAEAN,EAAA,KAAAI,EAAAG,QAbA,GAFApB,OAAAqB,MAAArB,OAAAsB,OAAAC,KAAAC,KAAAf,EAAAE,EAAAD,GAEAV,OAAAyB,aAEAZ,EAAAC,EAAA,OAGA,CAWA,GAAAY,IAEAjB,OAAAA,EACAC,KAAAA,EACAC,IAAAA,EACAC,QAAAG,EACAF,QAAAK,EACAS,OAAA,EACAC,SAAA,OAGA/B,GAAAgC,KAAAH,IAIA,OACAI,IAAA,SAAAlB,EAAAC,GAEAL,EAAA,MAAAT,EAAAG,EAAA6B,IAAAnB,EAAAC,OAEAmB,IAAA,SAAAC,EAAArB,EAAAC,GAEAL,EAAA,MAAAT,EAAAI,EAAAD,EAAA6B,IAAAE,EAAAC,QAAAtB,EAAAC,IAEAsB,OAAA,SAAAF,EAAAG,EAAAxB,EAAAC,GAEAL,EAAA,OAAA4B,EAAAjC,EAAAD,EAAA6B,KAAAnB,EAAAC,OAEAwB,OAAA,SAAAJ,EAAAG,EAAAxB,EAAAC,GAEAL,EAAA,MAAA4B,EAAAjC,EAAAD,EAAA6B,IAAAE,EAAAC,QAAAtB,EAAAC,OAEAyB,OAAA,SAAAL,EAAArB,EAAAC,GAEAL,EAAA,SAAAT,EAAAI,EAAAD,EAAA6B,IAAAE,EAAAC,QAAAtB,EAAAC,OAEA0B,MAAA,SAAA5B,EAAA4B,EAAA3B,EAAAC,GAEA,GAAAJ,GAAA8B,EAAA,OAAA,KAEA/B,GAAAC,EAAA8B,EAAA5B,EAAAC,EAAAC,OAIA,IAEA2B,OAAAhB","file":"rekord-jquery.min.js","sourcesContent":["(function ($, global, undefined)\n{\n\n  Rekord.setRest(function(database)\n  {\n    function removeTrailingSlash(x)\n    {\n      return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n    }\n\n    function execute( method, data, url, success, failure, offlineValue )\n    {\n      Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n      if ( Rekord.forceOffline )\n      {\n        failure( offlineValue, 0 );\n      }\n      else\n      {\n        function onRestSuccess(data, textStatus, jqXHR)\n        {\n          success( data );\n        }\n\n        function onRestError(jqXHR, textStatus, errorThrown)\n        {\n          failure( null, jqXHR.status );\n        }\n\n        var options =\n        {\n          method: method,\n          data: data,\n          url: url,\n          success: onRestSuccess,\n          failure: onRestError,\n          cache: false,\n          dataType: 'json'\n        };\n\n        $.ajax( options );\n      }\n    }\n\n    return {\n      all: function( success, failure )\n      {\n        execute( 'GET', undefined, database.api, success, failure, [] );\n      },\n      get: function( model, success, failure )\n      {\n        execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n      },\n      create: function( model, encoded, success, failure )\n      {\n        execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n      },\n      update: function( model, encoded, success, failure )\n      {\n        execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      remove: function( model, success, failure )\n      {\n        execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      query: function( url, query, success, failure )\n      {\n        var method = query ? 'POST' : 'GET';\n\n        execute( method, query, url, success, failure );\n      }\n    };\n\n  }, true );\n\n})( jQuery, this );\n"],"sourceRoot":"/source/"}