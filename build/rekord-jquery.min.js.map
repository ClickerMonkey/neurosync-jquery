{"version":3,"sources":["rekord-jquery.min.js"],"names":["global","Rekord","$","undefined","Rest","database","this","RestFactory","api","Rekord_rest","call","ajax","options","noop","isEmpty","transfer","rest","prototype","removeTrailingSlash","x","charAt","length","substring","all","success","failure","execute","get","model","$key","create","encoded","update","remove","query","url","data","method","offlineValue","debug","Debugs","REST","forceOffline","onRestSuccess","textStatus","jqXHR","onRestError","errorThrown","status","jQuery","cache","dataType","adjustOptions","setRest","RestClass"],"mappings":"CAAA,SAAWA,EAAQC,EAAQC,EAAGC,GAQ5B,QAASC,GAAKC,GAEZC,KAAKD,SAAWA,EAuElB,QAASE,GAAYF,GAEnB,MAAMA,GAASG,IAKR,GAAIJ,GAAMC,GAHRI,EAAYC,KAAMJ,KAAMD,GAMnC,QAASM,GAAKC,GAEZV,EAAES,KAAMC,GA3FV,GAAIC,GAAOZ,EAAOY,KACdC,EAAUb,EAAOa,QACjBC,EAAWd,EAAOc,SAElBN,EAAcR,EAAOe,IAOzBZ,GAAKa,WAEHC,oBAAqB,SAASC,GAE5B,MAAkC,MAA3BA,EAAEC,OAAOD,EAAEE,OAAS,GAAaF,EAAEG,UAAU,EAAGH,EAAEE,OAAS,GAAKF,GAEzEI,IAAK,SAAUC,EAASC,GAEtBnB,KAAKoB,QAAS,MAAO,KAAMvB,EAAWG,KAAKD,SAASG,IAAKgB,EAASC,OAEpEE,IAAK,SAAUC,EAAOJ,EAASC,GAE7BnB,KAAKoB,QAAS,MAAOE,EAAOzB,EAAWG,KAAKY,oBAAqBZ,KAAKD,SAASG,IAAMoB,EAAMC,QAAUL,EAASC,IAEhHK,OAAQ,SAAUF,EAAOG,EAASP,EAASC,GAEzCnB,KAAKoB,QAAS,OAAQE,EAAOG,EAASzB,KAAKY,oBAAqBZ,KAAKD,SAASG,KAAOgB,EAASC,OAEhGO,OAAQ,SAAUJ,EAAOG,EAASP,EAASC,GAEzCnB,KAAKoB,QAAS,MAAOE,EAAOG,EAASzB,KAAKY,oBAAqBZ,KAAKD,SAASG,IAAMoB,EAAMC,QAAUL,EAASC,OAE9GQ,OAAQ,SAAUL,EAAOJ,EAASC,GAEhCnB,KAAKoB,QAAS,SAAUE,EAAOzB,EAAWG,KAAKY,oBAAqBZ,KAAKD,SAASG,IAAMoB,EAAMC,QAAUL,EAASC,OAEnHS,MAAO,SAAUC,EAAKC,EAAMZ,EAASC,GAEnC,GAAIY,GAASvB,EAASsB,GAAS,MAAQ,MAEvC9B,MAAKoB,QAASW,EAAQ,KAAMD,EAAMD,EAAKX,EAASC,IAElDC,QAAS,SAAUW,EAAQT,EAAOQ,EAAMD,EAAKX,EAASC,EAASa,GAI7D,GAFArC,EAAOsC,MAAOtC,EAAOuC,OAAOC,KAAMnC,KAAM+B,EAAQF,EAAKC,GAEhDnC,EAAOyC,aAEVjB,EAASa,EAAc,OAGzB,CACE,GAAIK,GAAgB,SAASP,EAAMQ,EAAYC,GAE7CrB,EAASY,IAGPU,EAAc,SAASD,EAAOD,EAAYG,GAE5CtB,EAAS,KAAMoB,EAAMG,SAGnBpC,EAAUG,EAAUd,EAAOgD,OAAOrC,SACpCyB,OAAQA,EACRD,KAAMA,EACND,IAAKA,EACLX,QAASmB,EACTlB,QAASqB,EACTI,OAAO,EACPC,SAAU,QAGZlD,GAAOgD,OAAOG,cAAexC,EAASN,KAAKD,SAAUgC,EAAQT,EAAOQ,EAAMD,EAAKX,EAASC,GACxFxB,EAAOgD,OAAOtC,KAAMC,MAoB1BX,EAAOoD,QAAS9C,GAAa,GAE7BN,EAAOgD,QAELjC,KAAMT,EACNK,WACAwC,cAAevC,EACfF,KAAMA,EACN2C,UAAWlD,IAGXE,KAAMA,KAAKL,OAAQK,KAAK2C","file":"rekord-jquery.min.js","sourcesContent":["(function (global, Rekord, $, undefined)\n{\n  var noop = Rekord.noop;\n  var isEmpty = Rekord.isEmpty;\n  var transfer = Rekord.transfer;\n\n  var Rekord_rest = Rekord.rest;\n\n  function Rest(database)\n  {\n    this.database = database;\n  }\n\n  Rest.prototype =\n  {\n    removeTrailingSlash: function(x)\n    {\n      return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n    },\n    all: function( success, failure )\n    {\n      this.execute( 'GET', null, undefined, this.database.api, success, failure, [] );\n    },\n    get: function( model, success, failure )\n    {\n      this.execute( 'GET', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure );\n    },\n    create: function( model, encoded, success, failure )\n    {\n      this.execute( 'POST', model, encoded, this.removeTrailingSlash( this.database.api ), success, failure, {} );\n    },\n    update: function( model, encoded, success, failure )\n    {\n      this.execute( 'PUT', model, encoded, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    remove: function( model, success, failure )\n    {\n      this.execute( 'DELETE', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    query: function( url, data, success, failure )\n    {\n      var method = isEmpty( data ) ? 'GET' : 'POST';\n\n      this.execute( method, null, data, url, success, failure );\n    },\n    execute: function( method, model, data, url, success, failure, offlineValue )\n    {\n      Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n      if ( Rekord.forceOffline )\n      {\n        failure( offlineValue, 0 );\n      }\n      else\n      {\n        var onRestSuccess = function(data, textStatus, jqXHR)\n        {\n          success( data );\n        };\n\n        var onRestError = function(jqXHR, textStatus, errorThrown)\n        {\n          failure( null, jqXHR.status );\n        };\n\n        var options = transfer( Rekord.jQuery.options, {\n          method: method,\n          data: data,\n          url: url,\n          success: onRestSuccess,\n          failure: onRestError,\n          cache: false,\n          dataType: 'json'\n        });\n\n        Rekord.jQuery.adjustOptions( options, this.database, method, model, data, url, success, failure );\n        Rekord.jQuery.ajax( options );\n      }\n    }\n  };\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    return new Rest( database );\n  }\n\n  function ajax(options)\n  {\n    $.ajax( options );\n  }\n\n  Rekord.setRest( RestFactory, true );\n\n  Rekord.jQuery =\n  {\n    rest: RestFactory,\n    options: {},\n    adjustOptions: noop,\n    ajax: ajax,\n    RestClass: Rest\n  };\n\n})( this, this.Rekord, this.jQuery );\n"],"sourceRoot":"/source/"}